# -*- coding: utf-8 -*-
"""Simulacao FEM mini-camara.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LMCKRL9mkbSAPCGc2KIOOnsplsiZ7o0e
"""

!git clone https://github.com/biancakemerich/femder_simu.git _femderSimu2

!pip install meshio tqdm cloudpickle pymoo matplotlib seaborn pymkl
!pip3 install numba==0.51.2
!pip install gmsh==4.8.4
!pip install -U kaleido
!pip install plotly --upgrade
!apt-get install libsuitesparse-dev
!apt install swig
!pip install scikit-umfpack
!pip install -U numpy
!pip install pytta

!git clone https://github.com/MuriloCardosoSoares/sea.git
from sea.sea.materials import Material as mat

def enable_plotly_in_cell():
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''<script src="/static/components/requirejs/require.js"></script>'''))
  init_notebook_mode(connected=False)

import sys
sys.path.append('sea/sea')
sys.path.append('_femderSimu2')
sys.path.append('_femderSimu2/femder')
sys.path.append('/usr/local/lib/python3.7/site-packages/gmsh-4.8.4-Linux64-sdk/lib')
import femder as fd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from google.colab import drive
drive.mount('/content/drive')

path_to_geo = r"/content/drive/MyDrive/TCC/codes/geo/mini-camarareverb.iges"
AP = fd.AirProperties(c0 = 343)
fmax = 1300
AC = fd.AlgControls(AP,100,fmax,1)

sup = mat(octave_bands_statistical_alpha = [0.0246, 0.0369, 0.0347, 0.0388, 0.0581, 0.0515], octave_bands = [125, 250, 500, 1000, 2000, 4000], freq_vec=AC.freq)
sup.impedance_from_alpha(absorber_type="hard")
sup_admittance = sup.admittance
sup_surface_impedance = sup.surface_impedance

alfain = np.array([0.0246, 0.0369, 0.0347, 0.0388, 0.0581, 0.0515])
freq = np.array([125, 250, 500, 1000, 2000, 4000])

plt.style.use('seaborn-notebook')
plt.figure(figsize=(7,4))
plt.semilogx(AC.freq, sup.statistical_alpha,label='Recuperado', linestyle='--', linewidth=2)
plt.semilogx(freq, alfain, linestyle='-', label = r'$\alpha_{in}$',linewidth=2)
plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
plt.title('Teto', fontsize=17)
plt.xlabel('Frequência [Hz]', fontsize=16)
plt.ylabel(r'$\alpha_{s}$[-]', fontsize=20)
plt.xlim((100,2000))
plt.tight_layout()
plt.show()

S = fd.Source("spherical")
#S.coord = np.array([[-1,2.25,1.2],[1,2.25,1.2]])
S.coord = np.array([[1.15,0.19,0.52]])
S.q = np.array([0.001])

R = fd.Receiver()
R.coord = np.array([[0.33,0.23,0.21],[0.38,0.93,0.21],[0.92,0.95,0.21]]) 

BC = fd.BC(AC,AP)
BC.normalized_admittance([2,3,4,5,6,7,8,9,10],sup_admittance)

grid = fd.GridImport3D(AP,path_to_geo,S,R,fmax = fmax,num_freq=6,scale=1000,order=1,load_method='meshio')
obj = fd.FEM3D(grid,S,R,AP,AC,BC)

enable_plotly_in_cell()
obj.plot_problem(saveFig=False,camera_angles=['diagonal_front'],extension='png')

obj.compute()

obj.evaluate(R,True)

import pickle
with open("/content/drive/MyDrive/TCC/codes/obj_Minicamara_100_1300.pkl", "wb") as arquivo:
  pickle.dump(obj, arquivo)

import pickle
with open(f"/content/drive/MyDrive/TCC/codes/obj_Minicamara_100_1300.pkl","rb") as arquivo:
  obj = pickle.load(arquivo)

def p2SPL(p):
    SPL = 10*np.log10(0.5*p*np.conj(p)/(2e-5)**2)
    return np.real(SPL)

plt.style.use('seaborn-notebook')
plt.figure(figsize=(12,6))

if len(obj.R.coord)==1:
  plt.semilogx(obj.freq, p2SPL(obj.pR), linestyle='-', label=f'R | {obj.R.coord[0]}m')
else:
  for i in range(len(obj.R.coord)):
    plt.semilogx(obj.freq, p2SPL(obj.pR[:,i]), linestyle='-', label=f'R{i} | {obj.R.coord[i,:]}m')

if len(obj.R.coord) > 1:
  pR_med = np.mean(obj.pR,axis=1)
  plt.semilogx(obj.freq, p2SPL(pR_med), linestyle='--', label='Average', linewidth=4)

plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
plt.xlabel('Frequency [Hz]')
plt.ylabel('SPL [dB]')
#plt.xticks([20,40,60,80,100,120,160,200],[20,40,60,80,100,120,160,200]);
plt.xticks([100,125,160,200,250,315,400,500,630,1000,1250],[100,125,160,200,250,315,400,500,630,1000,1250]);
plt.tight_layout()
#plt.show()
#plt.savefig("teste.pdf")

import scipy.io
F1M1 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/F1M1.mat')
F1M2 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/F1M2.mat')
F1M3 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/F1M3.mat')

F1M1_v = F1M1['F1M1'] # espectro da Gravação
F1M2_v = F1M2['F1M2'] # espectro da Y
F1M3_v = F1M3['F1M3'] # espectro da Y

H1 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/H1.mat')
H2 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/H2.mat')
H3 = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/H3.mat')
H_med = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/H_med.mat')
H_medv = H_med['H_med']
freq_v = scipy.io.loadmat('/content/drive/MyDrive/TCC/codes/Medicao_RI/MiniCamara_dadosexp/freq_v.mat')
H1_v = H1['H1_j'] # Espectro da RI
H2_v = H2['H2_j'] 
H3_v = H3['H3_j']
freq_v = freq_v['fv']

fs = 51200
t = np.linspace(0, (len(F1M1_RIv)-1)/fs, len(F1M1_RIv))

plt.figure(figsize=(12,6))
plt.plot(t, F1M1_RIv, '-k', linewidth = 1, label = r'$RI_1$')
plt.legend(loc = 'upper right')
plt.grid(linestyle = '--', which='both')
plt.xlabel('Tempo [s]')
plt.ylabel('Amplitude [-]')
plt.xlim((0, t[-1]))
plt.tight_layout()
plt.show()

F1M1_expnorm = F1M1_v/max(abs(F1M1_v))
FIM1_simnorm = obj.pR[:,0]/max(abs(obj.pR[:,0]))

F1M2_expnorm = F1M2_v/max(abs(F1M2_v))
F1M2_simnorm = obj.pR[:,1]/max(abs(obj.pR[:,1]))

F1M3_expnorm = F1M3_v/max(abs(F1M3_v))
FIM3_simnorm = obj.pR[:,2]/max(abs(obj.pR[:,2]))

H1_expnorm = H1_v/max(abs(H1_v))
H2_expnorm = H2_v/max(abs(H2_v))
H3_expnorm = H3_v/max(abs(H3_v))
H_mednorm = H_medv/max(abs(H_medv))

simPR = np.mean(obj.pR,axis=1)
PR_medsimnorm = simPR/max(abs(simPR))

# MÉDIA

plt.figure(figsize=(12,6))
plt.semilogx(freq_v, p2SPL(H_mednorm), linestyle='-', label='Medido', color = 'darkorange')
plt.semilogx(obj.freq, p2SPL(PR_medsimnorm), linestyle='--', label='simulado',color = 'darkviolet')
plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
#plt.title('Função Resposta em Frequência Experimental')
plt.xlabel('Frequência [Hz]', fontsize=16)
plt.ylabel('Nível de Pressão Sonora [dB]', fontsize=16)
plt.xlim((100,1300))
plt.ylim((20,100))
#plt.xticks([20,40,60,80,100,120,160,200],[20,40,60,80,100,120,160,200]);
#plt.xticks([100,125,160,200,250,315,400,500,630,1000,1250],[100,125,160,200,250,315,400,500,630,1000,1250]);
plt.tight_layout()
#plt.savefig("/content/drive/MyDrive/TCC/Documento/minicamaraSimuladoExperimental_posicao1.pdf")
plt.show()

plt.figure(figsize=(12,6))
plt.semilogx(freq_v, p2SPL(H1_expnorm), linestyle='-', label='Medido', color = 'darkorange')
plt.semilogx(AC.freq, p2SPL(FIM1_simnorm), linestyle='--', label='Simulado',color = 'darkviolet')
plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
#plt.title('Função Resposta em Frequência Experimental')
plt.xlabel('Frequência [Hz]', fontsize=16)
plt.ylabel('Nível de Pressão Sonora [dB]', fontsize=16)
plt.xlim((100,1300))
plt.ylim((20,100))
#plt.xticks([20,40,60,80,100,120,160,200],[20,40,60,80,100,120,160,200]);
plt.xticks([100,125,160,200,250,315,400,500,630,1000,1250],[100,125,160,200,250,315,400,500,630,1000,1250]);
plt.tight_layout()
#plt.savefig("/content/drive/MyDrive/TCC/Documento/minicamaraSimuladoExperimental_posicao1.pdf")
plt.show()

plt.figure(figsize=(12,6))
plt.semilogx(freq_v, p2SPL(H2_expnorm), linestyle='-', label='R2 medido', color = 'darkorange')
plt.semilogx(obj.freq, p2SPL(F1M2_simnorm), linestyle='--', label='R2 simulado',color = 'darkviolet')
plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
#plt.title('Função Resposta em Frequência Experimental')
plt.xlabel('Frequência [Hz]', fontsize=16)
plt.ylabel('Nível de Pressão Sonora [dB]', fontsize=16)
plt.xlim((100,1300))
plt.ylim((30,100))
#plt.xticks([20,40,60,80,100,120,160,200],[20,40,60,80,100,120,160,200]);
plt.xticks([100,125,160,200,250,315,400,500,630,1000,1250],[100,125,160,200,250,315,400,500,630,1000,1250]);
plt.tight_layout()
#plt.savefig("/content/drive/MyDrive/TCC/Documento/minicamaraSimuladoExperimental_posicao2.pdf")
plt.show()

plt.figure(figsize=(12,6))
plt.semilogx(freq_v, p2SPL(H3_expnorm), linestyle='-', label='R3 medido', color = 'darkorange')
plt.semilogx(obj.freq, p2SPL(FIM3_simnorm), linestyle='--', label='R3 simulado',color = 'darkviolet')
plt.grid(linestyle = '--', which='both')
plt.legend(loc='best')
#plt.title('Função Resposta em Frequência Experimental')
plt.xlabel('Frequência [Hz]', fontsize=16)
plt.ylabel('Nível de Pressão Sonora [dB]', fontsize=16)
plt.xlim((100,1300))
plt.ylim((20,100))
#plt.xticks([20,40,60,80,100,120,160,200],[20,40,60,80,100,120,160,200]);
plt.xticks([100,125,160,200,250,315,400,500,630,1000,1250],[100,125,160,200,250,315,400,500,630,1000,1250]);
plt.tight_layout()
#plt.savefig("/content/drive/MyDrive/TCC/Documento/minicamaraSimuladoExperimental_posicao3.pdf")
plt.show()

enable_plotly_in_cell()
obj.pressure_field(frequencies = 245, renderer='notebook',saveFig=False,axis=['xy','yz'],camera_angles=['diagonal_front'],extension='pdf')

domain = Domain(1, 250, 5)
domain._high_pass_freq = 2 * domain.fmin
domain._low_pass_freq = 2 * domain.fmax
print(domain.freq)
domain.alpha = 0.1
ir = domain.compute_impulse_response(obj.pR[:,0], view=True, irr_filters=False)